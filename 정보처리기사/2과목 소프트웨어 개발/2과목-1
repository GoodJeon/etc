# 정보처리기사 공부(2022-01-30)



## 데이터 입출력 구현 A



### 자료구조

* 자료나 데이터들을 어떻게 정리할 것인가?
* 기억장치에 저장하는 방법
* 자료 간의 관계(연산), 처리 방법을 연구 분석하는 것이 자료 구조
* 자료 구조에 따라 실행시간이 달라질 수 있다.
* 분류
  * 선형 구조
    * 리스트
    * 스택
    * 큐
    * 데큐
  * 비선형 구조
    * 트리
    * 그래프





##### 선형 구조

* 리스트(Linear List)
  * 선형 리스트 : 배열(Array)
    * 연속된 기억공간에 저장
    * **기억 공간의 밀도가 좋다.**
    * 자료의 이동이 많기에
    * **삽입/삭제가 힘들다.**
    * 1차원 배열 : 일렬로 저장된 구조
    * 2차원 배열 : 행과 열로 저장된 구조
    * 3차원 배열 : 행,열,면으로 저장된 구조
  * 연결 리스트
    * **삽입/삭제**가 용이
    * **희소행렬**을 표현할때 용이(0이 많은 행렬)
    * 느리다.
    * 포인터 공간이 필요
    * 원형, 이중, 이중원형 연결리스트
* 스택(Stack)
  * **LIFO(후입선출)=FILO(선입후출)** 구조
  * 삽입/삭제가 한쪽 끝에서만 이루어지는 구조(`Top`에서)
  * 스택 자료구조의 크기가 `n`이라면
  * 데이터가 들어온다하면(**삽입**) Top을 +1 해주는데 
  * if(Top > n)일 경우 `OverFlow`라 해서 더 이상 삽입을 진행하지 못함
  * else일 경우 데이터를 삽입할 수 있다.
  * 데이터가 나간다하면(**삭제**) Top을 -1 해주는데
  * if(Top = 0)일 경우 `UnderFlow`라 해서 더이상 삭제를 진행하지 못함
  * else일 경우 데이터를 삭제할 수 있다.
  * 사용되는 곳 : 산술식 표현, 함수, 인터럽트의 복기주소에 사용
* 큐(Queue)
  * **FIFO(선입선출)=LILO(후입후출)**
  * 스택과 다르게 출입문과 나가는 문이 따로 있다.
  * 즉 한쪽 끝에서는 입력만, 한쪽 끝에서는 출력만 이루어진다.
  * 입력이 이루어지는 부분을 `Rear`, 삭제가 이루어지는 부분을 `Front`라 칭함
  * 삽입 :  r = r + 1
  * 삭제 :  f = f + 1
  * 사용되는 곳 : 작업스케쥴링, 버퍼관리 등에 활용
* 데큐(DeQueue)
  * 스크롤
    * 삽입을 한 군데를 막아버림
  * 셀프
    * 출력을 한 군데 막아버림

#### 비선형 구조

* 트리(Tree)
  * 사이클이 형성되지 않는 구조
  * 퍼져나가는 나무 구조
  * 꼭대기 : Root Node
  * 차수 : 가지 수 
  * 레벨 : 루트노드가 1일 때 그 이후 하위 가지들의 레벨이 1씩 추가된다.
  * 단말노드 : 차수가 0인 노드
  * 부모, 자식, 형제, 조상 등 찾아갈 줄 알면 된다.
  * 이진트리(Binary Tree)
    * 가지 수(차수)가 2인 트리
    * 완벽하게 다 채워진 형태를 정이친트리라 함
    * 채워지다 만 형태를 전이진트리라 함(**다만 왼쪽부터 다 채워져야 함**) 
  * 사향이진트리 등이 존재
* 그래프(Graph)
  * 사이클이 형성되는 구조